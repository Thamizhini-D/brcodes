#V1: Data values for concentration and absorbance are hard-coded in 

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats

#layout of the graph
plt.ylabel('absorbance at 595nm')
plt.xlabel('concentration of proteins')
plt.title('Graph of the standard curve')


#two sets of data values [hard coded in the data values]
conc = np.array([0, 7.5, 15, 30, 60])
abso = np.array([0, 0.178, 0.29, 0.487, 0.781])


#plotting the x and y 'ro' is required for the scatter plot; in general, its a blue line 'b-'
plt.plot(conc, abso, 'ro')

#line of best fit using polyfit function
m, c = np.polyfit(conc, abso, 1)
print('gradient=', m)
print('y-intercept', c)

plt.plot(conc, m*conc+c) 


#linear equation defining the relationship between the x and y variables: y = mx + c
reg_line = 'equation of the line: y = {} + {}x'.format(round(m, 3), round(c, 3))

print(reg_line)


#plug in the absorbance value in y = mx + c and calculate the concentration of proteins in sample solution

#new_y is the aborbance value for the sample with unknown concentration of proteins
new_y = float(input("What is your absorbance value?"))

#function calconc calculates the concentration of proteins in the sample solution by plugging in the absorbance value into the equation
def calconc (gradient, intercept, absorbance):
    concentration = (absorbance - intercept) / gradient
    return concentration 

calconc(m, c, new_y)

