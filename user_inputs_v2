#v2: User input for concentration and absorbance; stores values in a list, converts it into a numpy array for the purpose of plotting the line of best fit

import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats

#layout of the graph
plt.ylabel('absorbance at 595nm')
plt.xlabel('concentration of proteins')
plt.title('Graph of the standard curve')

#takes values from user and storing them in a list. Taken from 
#https://www.codegrepper.com/code-examples/python/program+in+python+to+store+n+values+in+array+and+print+their+sum

conc = []
user_conc = int(input("How many data values do you have for concentration: "))
print("Enter the data values for concentration: ")
for each in range(user_conc):
  values = float(input())
  conc.append(values)
print(conc)

abso = []
user_abso = int(input("Enter how many data values do you have for absorbance: "))
print("Enter the data values for absorbance: ")
for each in range(user_abso):
  values = float(input())
  abso.append(values)
print(abso)


#convert list to numpy array to plot the line of best fit
conc_arr = np.array(conc)
abso_arr = np.array(abso)

#plotting the x and y 'ro' is required for the scatter plot; in general, its a blue line 'b-'
plt.plot(conc_arr, abso_arr, 'ro')

#line of best fit using polyfit function
m, c = np.polyfit(conc_arr, abso_arr, 1)

print('gradient=', m)
print('y-intercept', c)

plt.plot(conc_arr, m*conc_arr+c) 

#linear equation defining the relationship between the x and y variables: y = mx + c
reg_line = 'equation of the line: y = {} + {}x'.format(round(m, 3), round(c, 3))

print(reg_line)


#plug in the absorbance value in y = mx + c and calculate the concentration of proteins in sample solution

#new_y is the aborbance value for the sample with unknown concentration of proteins
new_y = float(input("What is your absorbance value?"))

#function calconc calculates the concentration of proteins in the sample solution by plugging in the absorbance value into the equation
def calconc (gradient, intercept, absorbance):
    concentration = (absorbance - intercept) / gradient
    return concentration 

calconc(m, c, new_y)
